version: "3.9"
services:
  zookeeper:
    image: zookeeper:3.4.9
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zookeeper:2888:3888
    networks:
      - web_nw

  kafka:
    image: confluentinc/cp-kafka:5.5.1
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    depends_on:
      - zookeeper
    networks:
      - web_nw

  mongo:
    image: mongo
    restart: always
    env_file:
      - ./.env.dev
    networks:
      - web_nw

  server:
    build:
      context: ./server
    volumes:
      - ./server:/server
      - /server/node_modules
    links:
      - mongo
    env_file:
      - ./.env.dev
    networks:
      - web_nw
    environment:
      - CHOKIDAR_USEPOLLING=true
    command: sh -c "dockerize -wait tcp://kafka:9092 npm run dev"
    depends_on:
      - kafka
      - mongo

  client:
    build:
      context: ./client
    volumes:
      - ./client:/client
      - /client/node_modules
    env_file:
      - .env.dev
    ports:
      - "3000:3000"
    networks:
      - web_nw
    environment:
      - CHOKIDAR_USEPOLLING=true

  test:
    build:
      context: ./test
    volumes:
      - ./test:/test
      - /test/node_modules
    env_file:
      - .env.dev
    networks:
      - web_nw
    #command: sh -c "dockerize -wait tcp://kafka:9092 npm start"
    depends_on:
      - kafka

networks:
  web_nw:
    driver: bridge
